Sliding window approach is common algorithmic approach to solve the problems related to subarrays and substrings.
Example :
Used to find the sum of continuous subarrays
concepts include - one pointer(start) to other pointer(end).

start - beginning of an array
end - expands as per our requirements

1. Find the target value from the array and return their range of indexes

print('Sliding window concepts..')

def printSubArray(arr,target):
    start =0
    whole_sum =0 
    
    for i in range(len(arr)):
        whole_sum += arr[i]
        
        while (whole_sum > target and start <= i):
            whole_sum -= arr[start]
            start +=1
            
        if whole_sum == target:
            return (start,i)
            
    return -1

list_items = [4,7,8,2,3,4]
target = 10

result = printSubArray(list_items,target)
print(result)


2. print('Find the maximum sum of subarray..')

def printMaxSubArray(arr,k):
    if len(arr) < k:
        return -1
        
    #first sum
    whole_sum = sum(arr[:k])
    max_sum = whole_sum
    
    for i in range(k,len(arr)):
        whole_sum = whole_sum - arr[i-k] + arr[i]
        max_sum = max(max_sum,whole_sum)
    
        
    return (max_sum)
    
    

arr = [1,8,2,1,-1,4,1,2,2]
k = 56

result = printMaxSubArray(arr,k)
print(result)
